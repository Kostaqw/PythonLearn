@model PythonLearn.Domain.ViewModel.Article.CompleteArticle

@{
    ViewData["Title"] = "Python";
}

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <script src="~/js/ckeditor5/ckeditor.js"></script>
    <script src="https://kit.fontawesome.com/c2c8ebeca3.js" crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN"
            crossorigin="anonymous"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" type="text/css" href="js/slick-1.8.1/slick/slick.css" />
    <title>Обучение python</title>
</head>

<body>
    <div id="toTop"><i class="fas- fa-chevron-up"></i></div>
    <header class="menu-bar">
        <div class="container">
            <div class="row">
                <div class="col-xl-1 logo-bar">
                    <img src="~/images/logo.png" alt="Main logo" class="logo">
                    <button class="menu-icon">
                        <i class="fas fa-bars"></i>
                    </button>
                </div>
                <div class="col-xl-9 ml-auto align-self-center">
                    <nav>
                        <ul class="menu d-flex justify-content-end">
                            <li class="menu__item"><a href="/"><i class="fas fa-home"></i></a></li>
                            <li class="menu__item"><a href="#about">О нас</a></li>
                            <li class="menu__item"><a href="#service">Возможности</a></li>
                            <li class="menu__item"><a href="#portfolio">Обучение</a></li>
                            <li class="menu__item"><a href="#blog">Блог</a></li>
                            <li class="menu__item"><a href="#contact">Контакты</a></li>
                            <li class="menu__item">
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </header>

    <section class="aboutContent" id="about">
        <div class="container">
            <div class="row">
                <div class="col-xl-10">
                    <form method="post" asp-controller="Article" asp-action="Create" enctype="multipart/form-data">
                        <div class="row mt-3">
                            <div class="col">
                                <input id="titleName" asp-for="Name" placeholder="Заголовок" type="text" class="form-control">
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <input asp-for="ShortDescription" placeholder="Краткое описание" type="text" class="form-control">
                            </div>
                        </div>

                        <div class="text-center mt-3">
                            <textarea name="content" id="editor" class="form-control"></textarea>
                        </div>

                        <div class="text-center mt-3">
                            <button type="submit" class="register_button" value="ОТПРАВИТЬ">ОТПРАВИТЬ</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </section>



    <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.11.6/dist/umd/popper.min.js"
            integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3"
            crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"
            integrity="sha384-mQ93GR66B00ZXjt0YO5KlohRA5SY2XofN4zfuZxLkoj1gXtW8ANNCe9d5Y3eG5eD"
            crossorigin="anonymous"></script>

    <script src="js/jquery-3.6.3.js"></script>
    <script type="text/javascript" src="js/slick-1.8.1/slick/slick.min.js"></script>
    <script src="js/main.js"></script>
    
    <script>
        class MyUploadAdapter 
        {
            constructor(loader) {
                // The file loader instance to use during the upload. It sounds scary but do not
                // worry — the loader will be passed into the adapter later on in this guide.
                this.loader = loader;
            }
            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        this._initRequest();
                        this._initListeners(resolve, reject, file);
                        this._sendRequest(file);
                    }));
            }

            // Aborts the upload process.
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }

            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();
                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.

                xhr.open('POST', '@Url.Action("UplodImage","Article")', true);
                xhr.responseType = 'json';
            }

            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${file.name}.`;

                xhr.addEventListener('error', () => reject(genericErrorText));
                xhr.addEventListener('abort', () => reject());
                xhr.addEventListener('load', () => {
                    const response = xhr.response;

                    // This example assumes the XHR server's "response" object will come with
                    // an "error" which has its own "message" that can be passed to reject()
                    // in the upload promise.
                    //
                    // Your integration may handle upload errors in a different way so make sure
                    // it is done properly. The reject() function must be called when the upload fails.
                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    // If the upload is successful, resolve the upload promise with an object containing
                    // at least the "default" URL, pointing to the image on the server.
                    // This URL will be used to display the image in the content. Learn more in the
                    // UploadAdapter#upload documentation.
                    resolve({
                        default: response.url
                    });
                });

                // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
                // properties which are used e.g. to display the upload progress bar in the editor
                // user interface.
                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }

            // More methods.
            // ...

            // Prepares the data and sends the request.
            _sendRequest(file) {
                // Prepare the form data.
                const data = new FormData();
                var folderName= document.getElementById('titleName').value;
                data.append('upload', file);
                data.append('folder', folderName);
                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.

                // Send the request.
                this.xhr.send(data);
            }
        }
        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }
        ClassicEditor
            .create(document.querySelector('#editor'), 
            {   extraPlugins: [ MyCustomUploadAdapterPlugin ]})
            .then(editor => { window.editor = editor;  })
            .catch(err => { console.error(err.stack); });
</script>

</body>

</html>